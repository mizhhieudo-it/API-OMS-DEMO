// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(APIOMSContext))]
    partial class APIOMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.CategoryProduct", b =>
                {
                    b.Property<string>("CategoryProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryProductDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.HasKey("CategoryProductId");

                    b.ToTable("CategoryProduct", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProvinceId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WardsId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("varbinary(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Inventory", b =>
                {
                    b.Property<string>("InventoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("QuantityLoss")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPurchase")
                        .HasColumnType("int");

                    b.Property<int?>("QuantitySold")
                        .HasColumnType("int");

                    b.Property<int?>("StockInHand")
                        .HasColumnType("int");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.HasKey("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateDelivered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRequired")
                        .HasColumnType("datetime");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Prince")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderExport", b =>
                {
                    b.Property<string>("ExportOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeChangeLocation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("ToWarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExportOrderId");

                    b.ToTable("OrderExport", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderImport", b =>
                {
                    b.Property<string>("OrderImportId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedDelivery")
                        .HasColumnType("datetime");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProductPrince")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductTotal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("ToWarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderImportId");

                    b.ToTable("OrderImport", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderExportId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderImportId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupperlierId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("TrademarkId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryProductId");

                    b.HasIndex("OrderImportId");

                    b.HasIndex("SupperlierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ProductDetail", b =>
                {
                    b.Property<string>("ProductDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BARCODE");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("HandlerBy")
                        .HasColumnType("datetime");

                    b.Property<string>("HashTag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagesDescription")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IMEI");

                    b.Property<decimal?>("ImportPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("ListedPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("NumberStockWaring")
                        .HasColumnType("int");

                    b.Property<double?>("ProductHeight")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("ProductLength")
                        .HasColumnType("float");

                    b.Property<string>("ProductSku")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProductSKU");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<double?>("ProductWidth")
                        .HasColumnType("float");

                    b.Property<decimal?>("RetailPrince")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("TimeCreat")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeImportProduct")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Supperlier", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankOwnerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SupperlierBankNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("SupperlierBankType")
                        .HasColumnType("int");

                    b.Property<int?>("SupperlierStatus")
                        .HasColumnType("int");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierTaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierWebsite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("datetime");

                    b.HasKey("SupplierId");

                    b.ToTable("Supperlier", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TransactionType", b =>
                {
                    b.Property<string>("TransactionTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateBy")
                        .HasColumnType("datetime");

                    b.Property<int?>("DistrinctId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HandlerBy")
                        .HasColumnType("datetime");

                    b.Property<string>("LocationMap")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateBy")
                        .HasColumnType("datetime");

                    b.Property<string>("WarehouseAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseNameContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehousePostalCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("Domain.Models.WhArea", b =>
                {
                    b.Property<string>("IdWhArea")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HandlerBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdWarehouse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdWhArea");

                    b.HasIndex("IdWarehouse");

                    b.ToTable("WhArea", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Invoice", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Invoices_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.HasOne("Domain.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Payment_Invoices");

                    b.HasOne("Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Payment_PaymentMethod");

                    b.HasOne("Domain.Models.TransactionType", "TransactionType")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_Payment_TransactionType");

                    b.Navigation("Invoice");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.CategoryProduct", "CategoryProduct")
                        .WithMany("Products")
                        .HasForeignKey("CategoryProductId")
                        .HasConstraintName("FK_Product_CategoryProduct");

                    b.HasOne("Domain.Models.OrderExport", "OrderImport")
                        .WithMany("Products")
                        .HasForeignKey("OrderImportId")
                        .HasConstraintName("FK_Product_OrderExport");

                    b.HasOne("Domain.Models.OrderImport", "OrderImportNavigation")
                        .WithMany("Products")
                        .HasForeignKey("OrderImportId")
                        .HasConstraintName("FK_Product_OrderImport");

                    b.HasOne("Domain.Models.Supperlier", "Supperlier")
                        .WithMany("Products")
                        .HasForeignKey("SupperlierId")
                        .HasConstraintName("FK_Product_Supperlier");

                    b.HasOne("Domain.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_Product_Warehouse");

                    b.Navigation("CategoryProduct");

                    b.Navigation("OrderImport");

                    b.Navigation("OrderImportNavigation");

                    b.Navigation("Supperlier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Models.ProductDetail", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductDetail_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.WhArea", b =>
                {
                    b.HasOne("Domain.Models.Warehouse", "IdWarehouseNavigation")
                        .WithMany("WhAreas")
                        .HasForeignKey("IdWarehouse")
                        .HasConstraintName("FK_WhArea_Warehouse");

                    b.Navigation("IdWarehouseNavigation");
                });

            modelBuilder.Entity("Domain.Models.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Models.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Models.OrderExport", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.OrderImport", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Domain.Models.Supperlier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.TransactionType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Models.Warehouse", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("WhAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
